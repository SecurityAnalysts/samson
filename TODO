Idea backlog
---------------
X   Wang's Attack
X   RC6
X   Argon2
X   CAST
?   Stateless block cipher shuffling
X   Differential power analysis
X   Flush+Reload key recovery


CURRENT
---------------
0.2.0
===============
X   Timing attack framework
    OK  Build TimingOracle
    X   Time sync
    X   Techniques to increase sync resolution from a lower resolution oracle


X   Document timing attack setup


0.3.0
===============
X   More encoders/decoders/cryptosystems
    X   PGP


X   OCB3


X   Document new parsers
    X   Add class/function documentation


X   DocTests
    X   Swap to Pytest
    X   Write doctests


X   CAS
    OK  Document all classes
    OK  Expression to poly
    OK  Polys can take different Symbols
    OK  Fix FiniteField invert (PolyElement invert)
    X   Calculate ring characteristics
    X   Replace all sympy with native CAS
    OK  Convert EllipticCurves into rings
    OK  Easily build DH ring (mod-pow)... generic mult subgroup ring?


X   Improve Polynomial implementation
    X   NTT-DFT (or something for arbitrary algebras) for multiplication/division
    OK  Sparse vector as underlying list
    X   Fast modulo


X   Document these classes
    OK  JWS
    X   JWA
    OK  PKCS1v15RSASigner


X   Test math
    X   Unittest math.general
    X   Unittest algebras
    OK  Doctest math.general
    OK  Doctest algebras


X   Better exceptions
X   Unify Diffie-Hellmans
X   LRU caching?

X   Swappable backends?
X   Separate key parameters from use? Explains some gaps in functions vs data
    X   ECKey, so it can be used in ECDHE and ECDSA

X   Create functions/objects for invalid curve attacks https://auth0.com/blog/critical-vulnerability-in-json-web-encryption/

X   Hierarchical and optionally persistent runtime configuration


X  Rabbit stream cipher
X  HC-256 stream cipher

X  DHParams ASN1


X   Composable exploits and ACE
    OK  RUNTIME primitive property/exploit loading
    X   RUNTIME programmatic search
    OK  ACE verified against several manual cryptanalysis test vectors
    X   ACE creates working exploits
    X   ACE correctly detects
        X   Small key size
        X   Non-CSPRNGs
        X   Meet in the middle attacks


OK  ACE should be able to register multiple exploits per class
X   Asymmetric encryption in ACE

X   Refactor ACE tests
    X   Stop weird three-function thing
    X   Rename variables (what is enc_perm?)

X   Does 'exploit.py/register_knowns' need to exist any more? Why not just use decorators?

X   ACE should be able to enumerate all attack paths


X   samson-py currently requires Python3 + PyPy3 dependencies; fix?

X   Ensure samson installs correctly
    X   Library
    X   REPL
    X   CLI
    X   Man page
    X   Supported OSs
        X   Fedora 29
        X   Kali


Future
===============
X   RC6
X   Argon2
X   Yarrow
X   Fortuna
X   Blum blum shub
X   SM3
X   SM4
X   Primitive analysis
X   CAST
X   STREAM