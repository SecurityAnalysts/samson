from samson.constructions.merkle_damgard_construction import MerkleDamgardConstruction
from samson.utilities.manipulation import left_rotate
from samson.utilities.bytes import Bytes
import math

# The Whirlpool Secure Hash Function by William Stallings
# https://pdfs.semanticscholar.org/f7e3/75bc947377816162c4ee37bd34f161042462.pdf

SBOX = [
    [0x18, 0x23, 0xC6, 0xE8, 0x87, 0xB8, 0x01, 0x4F, 0x36, 0xA6, 0xD2, 0xF5, 0x79, 0x6F, 0x91, 0x52],
    [0x60, 0xBC, 0xB, 0x8E, 0xA3, 0x0C, 0x7B, 0x35, 0x1D, 0xE0, 0xD7, 0xC2, 0x2E, 0x4B, 0xFE, 0x57],
    [0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xCA, 0x58, 0xC9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85],
    [0xBD, 0x5D, 0x10, 0xF4, 0xCB, 0x3E, 0x05, 0x67, 0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7D, 0x95, 0xC8],
    [0xFB, 0xEE, 0x7C, 0x66, 0xDD, 0x17, 0x47, 0x9E, 0xCA, 0x2D, 0xBF, 0x07, 0xAD, 0x5A, 0x83, 0x33],
    [0x63, 0x02, 0xAA, 0x71, 0xC8, 0x19, 0x49, 0xC9, 0xF2, 0xE3, 0x5B, 0x88, 0x9A, 0x26, 0x32, 0xB0],
    [0xE9, 0x0F, 0xD5, 0x80, 0xBE, 0xCD, 0x34, 0x48, 0xFF, 0x7A, 0x90, 0x5F, 0x20, 0x68, 0x1A, 0xAE],
    [0xB4, 0x54, 0x93, 0x22, 0x64, 0xF1, 0x73, 0x12, 0x40, 0x08, 0xC3, 0xEC, 0xDB, 0xA1, 0x8D, 0x3D],
    [0x97, 0x00, 0xCF, 0x2B, 0x76, 0x82, 0xD6, 0x1B, 0xB5, 0xAF, 0x6A, 0x50, 0x45, 0xF3, 0x30, 0xEF],
    [0x3F, 0x55, 0xA2, 0xEA, 0x65, 0xBA, 0x2F, 0xC0, 0xDE, 0x1C, 0xFD, 0x4D, 0x92, 0x75, 0x06, 0x8A],
    [0xB2, 0xE6, 0x0E, 0x1F, 0x62, 0xD4, 0xA8, 0x96, 0xF9, 0xC5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4C],
    [0x5E, 0x78, 0x38, 0x8C, 0xC1, 0xA5, 0xE2, 0x61, 0xB3, 0x21, 0x9C, 0x1E, 0x43, 0xC7, 0xFC, 0x04],
    [0x51, 0x99, 0x6D, 0x0D, 0xFA, 0xDF, 0x7E, 0x24, 0x3B, 0xAB, 0xCE, 0x11, 0x8F, 0x4E, 0xB7, 0xEB],
    [0x3C, 0x81, 0x94, 0xF7, 0xB9, 0x13, 0x2C, 0xD3, 0xE7, 0x6E, 0xC4, 0x03, 0x56, 0x44, 0x7F, 0xA9],
    [0x2A, 0xBB, 0xC1, 0x53, 0xDC, 0x0B, 0x9D, 0x6C, 0x31, 0x74, 0xF6, 0x46, 0xAC, 0x89, 0x14, 0xE1],
    [0x16, 0x3A, 0x69, 0x09, 0x70, 0xB6, 0xC0, 0xED, 0xCC, 0x42, 0x98, 0xA4, 0x28, 0x5C, 0xF8, 0x86]
]

C_MDS = [
    [0x01, 0x01, 0x04, 0x01, 0x08, 0x05, 0x02, 0x09],
    [0x09, 0x01, 0x01, 0x04, 0x01, 0x08, 0x05, 0x02],
    [0x02, 0x09, 0x01, 0x01, 0x04, 0x01, 0x08, 0x05],
    [0x05, 0x02, 0x09, 0x01, 0x01, 0x04, 0x01, 0x08],
    [0x08, 0x05, 0x02, 0x09, 0x01, 0x01, 0x04, 0x01],
    [0x01, 0x08, 0x05, 0x02, 0x09, 0x01, 0x01, 0x04],
    [0x04, 0x01, 0x08, 0x05, 0x02, 0x09, 0x01, 0x01],
    [0x01, 0x04, 0x01, 0x08, 0x05, 0x02, 0x09, 0x01]
]


ROUNDS = 10
ROUND_CONSTANTS = [
    0x0000000000000000,
    0x1823c6e887b8014f,
    0x36a6d2f5796f9152,
    0x60bc9b8ea30c7b35,
    0x1de0d7c22e4bfe57,
    0x157737e59ff04ada,
    0x58c9290ab1a06b85,
    0xbd5d10f4cb3e0567,
    0xe427418ba77d95d8,
    0xfbee7c66dd17479e,
    0xca2dbf07ad5a8333,
]

# x^8 + x^4 + x^3 + x^2 + 1
def _gmul(a, b):
    p = 0

    for _ in range(8):
        if (b & 1) != 0:
            p ^= a

        hi_bi_set = (a & 0x80) != 0
        a <<=1

        if hi_bi_set:
            a ^= 0x1D

        b >>= 1

    return p


def ADD_KEY(K, A):
    return [K[i][j] ^ A[i][j] for j in range(8) for i in range(8)]


def SUB_BYTES(A):
    return [SBOX[A[i][j]] for j in range(8) for i in range(8)]


def SHIFT_COLUMNS(A):
    return [A[(i-j) % 8][j] for j in range(8) for i in range(8)]


def MIX_COLUMNS(A):
    # TODO: This needs to be matrix multiplication.
    return [_gmul(A[i][j], C_MDS[j][i]) for j in range(8) for i in range(8)]


def compression_func(message, state):
    pass



class Whirlpool(MerkleDamgardConstruction):
    """
    Hash built using the Merkle-Damgard construction whose compression function is a Miyaguchi-Preneel construction
    of an AES-like block cipher 'W'.
    """

    def __init__(self, initial_state: bytes=None):
        """
        Parameters:
            initial_state (bytes): (Optional) Initial internal state.
        """
        super().__init__(
            initial_state=initial_state,
            compression_func=compression_func,
            digest_size=64,
            endianness='big'
        )


    def __repr__(self):
        return f"<Whirlpool: initial_state={self.initial_state}, block_size={self.block_size}>"

    def __str__(self):
        return self.__repr__()
